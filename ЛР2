# Вариант 3. Пересечение множеств
def find_common_elements(list1, list2):
    return sorted(set(list1) & set(list2))

# Вводим множества
list1 = [1, 3, 2]
list2 = [4, 3, 2]

result1 = find_common_elements(list1, list2)



# Вариант 13. Родословная: LCA
def find_lca(tree, node1, node2):
    def find_path(node, target):
        path = [node]
        while node != target:
            found = False
            for parent, children in tree.items():
                if node in children:
                    path.append(parent)
                    node = parent
                    found = True
                    break
            if not found:
                break
        return path

    path1 = find_path(node1, node2)
    path2 = find_path(node2, node1)

    if not path1 or not path2:
        return "Один из узлов не найден в генеалогическом древе."

    lca = None
    for ancestor1, ancestor2 in zip(path1[::-1], path2[::-1]):
        if ancestor1 == ancestor2:
            lca = ancestor1
        else:
            break

    return lca

# Функция для ввода генеалогического древа с клавиатуры
def input_genealogy_tree():
    print("Введите генеалогическое древо:")
    tree = {}
    while True:
        line = input().strip()
        if not line:
            break
        parent, *children = line.split()
        tree[parent] = children
        # Добавляем всех детей в древо
        for child in children:
            tree[child] = []
    return tree

# Пример использования
genealogy_tree = input_genealogy_tree()

while True:
    print("Узлы в генеалогическом древе:", genealogy_tree.keys())
    node1, node2 = input("Введите два узла для поиска их наименьшего общего предка: ").split()
    all_nodes = set(node for nodes in genealogy_tree.values() for node in nodes) | set(genealogy_tree.keys())
    if node1 not in all_nodes or node2 not in all_nodes:
        print("Один из узлов не найден в генеалогическом древе.")
        continue
    lca = find_lca(genealogy_tree, node1, node2)
    print("Наименьший общий предок для узлов {} и {}: {}".format(node1, node2, lca))
    choice = input("Продолжить? (Да/Нет): ").strip().lower()
    if choice != 'да':
        break
